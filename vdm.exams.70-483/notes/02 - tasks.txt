# Tasks

Queuing a work item to a thread pool is usefull, but there is no build-in way of knowing when it is finished and what the return value is.
This is why .NET introduced the concept of Tasks, which is an object that represents some work that should be done.
The Task can tell you if the work is completed and if the operation returns a result. The Task gives the result.

A Task scheduler is responsible for starting the Task and managing it. By default, the Task Scheduler uses threads from the thread pool to execute the Task.

Tasks can be used to make your application more responsive. It makes it easy to offload work from the main UI thread.
You can also parallelize work to make use of multiple processors.

It does NOT help with scalability!

Creating a task:
	Task<int> t = Task.Run(() =>
	{
		return 42;
	});

	Console.WriteLine(t.Result);

You can use Task.ContinueWith to do another operation as soon as the task finishes.

ContinueWith has a number of overloads you can use to configure when the continuation will run. This way you can have different continuation methods when an exception happens and the Task is cancelled.

A task can have one or more child task. The parent task is completed when all child tasks are completed.

Create a child task and attach it to parent:
	...
	new Task(() => { ... }, TaskCreationOptions.AttachedToParent).Start();
	...


You can use Task.WaitAll(Taks[]) to wait for an array of tasks to be completed.
See also WhenAll and WaitAny methods as a continuation methods for WaitAll.


A task factory can be used to setup a numberous Tasks in an easy way.

	TaskFactory tf = new TaskFactory(TaskCreateOptions.AttachedToParent, TaskContinueationOptions.ExecuteSynchronously);

	tf.StartNew(() => { ... });
	tf.StartNew(() => { ... });
	tf.StartNew(() => { ... });


# Parallel

Parallel has a number of static methods to concurrently execute a function on every item in sequence.
Note that for small amounts of work or synchronize access to resources it can hurt performance.

	code: Parallel.For(0, 10, i => { Console.WriteLine(i); });
